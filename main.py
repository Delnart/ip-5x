import nextcord
from nextcord.ext import commands
import os
from dotenv import load_dotenv
import asyncio

from config import COMMAND_PREFIX
from database.db import db
from utils.logs import Logger

# Load environment variables
load_dotenv()

# Bot intents
intents = nextcord.Intents.all()

# Initialize bot
bot = commands.Bot(
    command_prefix=COMMAND_PREFIX,
    intents=intents,
    help_command=None  # We use custom help command
)

# Global logger instance
logger = None

@bot.event
async def on_ready():
    """Bot startup event"""
    global logger
    
    print("=" * 50)
    print(f"ü¶é Bot logged in as {bot.user.name}")
    print(f"üÜî Bot ID: {bot.user.id}")
    print(f"üîß Nextcord version: {nextcord.__version__}")
    print("=" * 50)
    
    # Connect to database
    await db.connect()
    
    # Initialize logger
    logger = Logger(bot)
    
    # Load cogs
    print("\nüîÑ Loading cogs...")
    cogs = [
        'cogs.welcome',
        'cogs.voice',
        'cogs.moderation',
        'cogs.groups'
    ]
    
    for cog in cogs:
        try:
            bot.load_extension(cog)
            print(f"‚úÖ Loaded: {cog}")
        except Exception as e:
            print(f"‚ùå Failed to load {cog}: {e}")
    
    print("\n‚úÖ Bot is ready!")
    print("=" * 50)
    
    # Set bot status
    await bot.change_presence(
        activity=nextcord.Game(name="ü¶é –ö–µ—Ä—É—é –ø–æ—Ç–æ–∫–æ–º –Ü–ü-5x")
    )

@bot.event
async def on_member_update(before, after):
    """Handle member role updates"""
    if before.roles != after.roles:
        if logger:
            await logger.log_role_update(after, before.roles, after.roles)

@bot.event
async def on_message_delete(message):
    """Handle message deletion"""
    if logger and not message.author.bot:
        await logger.log_message_delete(message)

@bot.event
async def on_message_edit(before, after):
    """Handle message edits"""
    if logger and not before.author.bot:
        await logger.log_message_edit(before, after)

@bot.event
async def on_command_error(ctx, error):
    """Global error handler"""
    from utils.embeds import error_embed
    
    if isinstance(error, commands.MissingPermissions):
        await ctx.send(
            embed=error_embed(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤",
                "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏."
            )
        )
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send(
            embed=error_embed(
                "–ü–æ–º–∏–ª–∫–∞",
                f"–ù–µ –≤–∏—Å—Ç–∞—á–∞—î –∞—Ä–≥—É–º–µ–Ω—Ç—É: `{error.param.name}`\n"
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `!help` –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥."
            )
        )
    elif isinstance(error, commands.CommandNotFound):
        pass  # Ignore unknown commands
    elif isinstance(error, commands.MemberNotFound):
        await ctx.send(
            embed=error_embed(
                "–ü–æ–º–∏–ª–∫–∞",
                "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π."
            )
        )
    elif isinstance(error, commands.BadArgument):
        await ctx.send(
            embed=error_embed(
                "–ü–æ–º–∏–ª–∫–∞",
                "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–∏.\n"
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ `!help` –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è."
            )
        )
    elif isinstance(error, commands.CheckFailure):
        await ctx.send(
            embed=error_embed(
                "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤",
                "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏."
            )
        )
    elif isinstance(error, commands.CommandOnCooldown):
        await ctx.send(
            embed=error_embed(
                "–û–±–º–µ–∂–µ–Ω–Ω—è",
                f"–¶—è –∫–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞—Ä—è–¥—Ü—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {error.retry_after:.1f} —Å–µ–∫—É–Ω–¥."
            )
        )
    else:
        print(f"‚ùå Command error in {ctx.command}: {error}")
        await ctx.send(
            embed=error_embed(
                "–ü–æ–º–∏–ª–∫–∞",
                "–°—Ç–∞–ª–∞—Å—è –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥–∏."
            )
        )

@bot.event
async def on_error(event, *args, **kwargs):
    """Global error handler for events"""
    import traceback
    print(f"‚ùå Error in event {event}:")
    traceback.print_exc()

# Simple commands for testing
@bot.command(name="ping")
async def ping(ctx):
    """Check bot latency"""
    from utils.embeds import info_embed
    latency = round(bot.latency * 1000)
    embed = info_embed(
        "Pong! üèì",
        f"–ó–∞—Ç—Ä–∏–º–∫–∞: **{latency}ms**"
    )
    await ctx.send(embed=embed)

@bot.command(name="invite")
async def invite(ctx):
    """Get bot invite link"""
    from utils.embeds import info_embed
    
    # Generate invite link
    permissions = nextcord.Permissions(
        kick_members=True,
        ban_members=True,
        manage_channels=True,
        manage_roles=True,
        manage_messages=True,
        view_channel=True,
        send_messages=True,
        embed_links=True,
        attach_files=True,
        read_message_history=True,
        moderate_members=True,
        move_members=True,
        connect=True,
        speak=True
    )
    
    invite_link = nextcord.utils.oauth_url(
        bot.user.id,
        permissions=permissions,
        scopes=["bot", "applications.commands"]
    )
    
    embed = info_embed(
        "–ó–∞–ø—Ä–æ—Å–∏—Ç–∏ –±–æ—Ç–∞",
        f"[–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç —â–æ–± –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –±–æ—Ç–∞]({invite_link})"
    )
    await ctx.send(embed=embed)

@bot.command(name="about")
async def about(ctx):
    """Information about the bot"""
    from utils.embeds import create_embed
    
    embed = create_embed(
        "–ü—Ä–æ –±–æ—Ç–∞",
        "–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–æ–º Discord –ø–æ—Ç–æ–∫—É –Ü–ü-5x"
    )
    
    embed.add_field(
        name="–í–µ—Ä—Å—ñ—è",
        value="1.0.0",
        inline=True
    )
    
    embed.add_field(
        name="Nextcord",
        value=nextcord.__version__,
        inline=True
    )
    
    embed.add_field(
        name="–°–µ—Ä–≤–µ—Ä—ñ–≤",
        value=str(len(bot.guilds)),
        inline=True
    )
    
    embed.add_field(
        name="–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
        value=str(len(bot.users)),
        inline=True
    )
    
    embed.add_field(
        name="–ö–æ–º–∞–Ω–¥",
        value=str(len(bot.commands)),
        inline=True
    )
    
    embed.add_field(
        name="–§—É–Ω–∫—Ü—ñ—ó",
        value="‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª–∞\n"
              "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥—Ä—É–ø\n"
              "‚Ä¢ –¢–∏–º—á–∞—Å–æ–≤—ñ –≥–æ–ª–æ—Å–æ–≤—ñ –∫–∞–Ω–∞–ª–∏\n"
              "‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü—ñ—è\n"
              "‚Ä¢ –õ–æ–≥—É–≤–∞–Ω–Ω—è",
        inline=False
    )
    
    embed.set_footer(text=f"–ó–∞–ø—É—â–µ–Ω–æ —è–∫ {bot.user.name}")
    embed.set_thumbnail(url=bot.user.display_avatar.url)
    
    await ctx.send(embed=embed)

# Run bot
if __name__ == "__main__":
    token = os.getenv('DISCORD_TOKEN')
    
    if not token:
        print("‚ùå Error: DISCORD_TOKEN not found in .env file")
        print("Please create a .env file and add your bot token:")
        print("DISCORD_TOKEN=your_token_here")
    else:
        try:
            print("üöÄ Starting bot...")
            bot.run(token)
        except nextcord.LoginFailure:
            print("‚ùå Failed to login: Invalid token")
        except Exception as e:
            print(f"‚ùå Failed to start bot: {e}")